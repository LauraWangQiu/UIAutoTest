import subprocess
import os
import threading
from src.sikulixWrapper import SikulixWrapper
from src.graphsDef import Graph, Node, Transition

"""
    This class is used to run a selected executable in a secondary thread and generate a graph of the execution
    flow. The graph is generated by iterating over the nodes and adding them to the graph.
"""
class GenerateGraph:
    def __init__(self, selected_executable=None):
        self.selected_executable = selected_executable
        self.thread = None
        self.graph = Graph()
        self.node_inputs = []
        self.delay_ms = 1000
        self.actual_node = None # Last node iterated.
        self.start_node = None # First node of loop.
        self.sikuli = SikulixWrapper()

    """
        Calls the callback function after a delay in milliseconds.
    """
    def after(self, delay_ms, callback):
        delay_seconds = delay_ms / 1000.0
        timer = threading.Timer(delay_seconds, callback)
        timer.start()

    """
        Returns the graph object.
    """
    def get_graph(self):
        return self.graph

    """
        Generates the graph by running the selected executable in a secondary thread.
        If the graph is already generated, it will not generate it again.
    """
    def generate_graph(self):
        print("Generating graph for " + self.selected_executable)
        
        # TODO: Save the current state of the executable in case of a crash or being on a leaf node

        # Run for the first time
        self.__start_executable_in_thread__()
        if self.graph is None:
            self.after(self.delay_ms, self.__loop__)

    """
        Runs the selected executable in a secondary thread.
    """
    def __start_executable_in_thread__(self):
        """
            Runs the selected executable.
        """
        def start_executable():
            try:
                print("Starting executable: " + self.selected_executable)
                self.process = subprocess.Popen([self.selected_executable])
            except FileNotFoundError:
                print("Executable not found: " + self.selected_executable)
                self.process = None

        self.thread = threading.Thread(target=start_executable, daemon=True)
        self.thread.start()

    """
        Iterates over the nodes in the graph and adds them to the graph.
    """
    valid_extensions = {'.png', '.jpg', '.jpeg', '.bmp'}
    def __loop__(self):
        print("Looping through the graph")
        # TODO: Connect with Sikulix wrapper to consider start node and iterate over the inputs
        # adding nodes and edges to the graph
        new_node = None
        
        actual_path = os.path.dirname(os.path.abspath(__file__))
        # Path to asignated nodes images by user.
        folder_path = os.path.join(actual_path, "imgs", "self_nodes")
        for file in os.listdir(folder_path):
            state_path = os.path.join(folder_path, file)
            if os.path.isfile(state_path) and os.path.splitext(file)[1].lower() in self.valid_extensions:# Checks if file is a image.
                if self.sikuli.search_image(state_path): # If screen is the same as captured.
                    # Setting the new node.
                    new_node = Node(file)
                    new_node.set_image(state_path)
                    input_sikuli(os.path.join(folder_path, "buttons"), new_node)
                pass
        
        if new_node is None:
            print(f"Node in loop not found, creating new...")
            new_node = Node("New node")
            Graph.add_node(new_node)
            # TODO Make a screen capture of the actualscene
            return
        
        Graph.add_node(new_node)


        self.actual_node

def input_sikuli(self, buttons_path, node):
    click_buttons_path = os.path.join(buttons_path,"click")
    click(click_buttons_path, node)

def click(self, images_path, node):
    buttons_images = [f for f in os.listdir(images_path) if os.path.isfile(os.path.join(images_path, f))]
    for i in images_path:
        transition = Transition()        
        node.add_transition(transition)
        self.sikuli.click_image(i)
        self.after(self.delay_ms, self.__loop__)
