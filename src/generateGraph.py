import subprocess
import threading
from src.graphsDef import Graph

"""
    This class is used to run a selected executable in a secondary thread and generate a graph of the execution
    flow. The graph is generated by iterating over the nodes and adding them to the graph.
    The class is designed to be inherited by other classes that will implement the on_graph_step method to
    retain the information about the graph.
"""
class GenerateGraph:
    def __init__(self, selected_executable=None):
        self.selected_executable = selected_executable
        self.thread = None
        self.graph = Graph()
        self.node_inputs = []
        self.delay_ms = 1000

    """
        Calls the callback function after a delay in milliseconds.
    """
    def after(self, delay_ms, callback):
        delay_seconds = delay_ms / 1000.0
        timer = threading.Timer(delay_seconds, callback)
        timer.start()

    """
        Returns the graph object.
    """
    def get_graph(self):
        return self.graph

    """
        Generates the graph by running the selected executable in a secondary thread.
        If the graph is already generated, it will not generate it again.
    """
    def generate_graph(self):
        print("Generating graph for " + self.selected_executable)
        # TODO: Save the current state of the executable in case of a crash or being on a leaf node

        # Run for the first time
        self.__start_executable_in_thread__()
        self.after(self.delay_ms, self.__loop__)

    """
        Runs the selected executable in a secondary thread.
    """
    def __start_executable_in_thread__(self):
        """
            Runs the selected executable.
        """
        def start_executable():
            try:
                print("Starting executable: " + self.selected_executable)
                self.process = subprocess.Popen([self.selected_executable])
            except FileNotFoundError:
                print("Executable not found: " + self.selected_executable)
                self.process = None

        self.thread = threading.Thread(target=start_executable, daemon=True)
        self.thread.start()

    """
        Iterates over the nodes in the graph and adds them to the graph.
    """
    def __loop__(self):
        print("Looping through the graph")
        # TODO: Connect with Sikulix wrapper to consider start node and iterate over the inputs
        # adding nodes and edges to the graph
